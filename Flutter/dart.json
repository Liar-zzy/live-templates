{
    // Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "flutter redux action": {
        "prefix": "acti",
        "body": [
            "class Fetch$1Action {}",
            "",
            "class $1RequestAction {}",
            "",
            "class $1SuccessAction {",
            "  final $2 info;",
            "  ",
            "  $1SuccessAction({this.info});",
            "}",
            "",
            "class $1FailureAction {",
            "  final RequestFailureInfo errorInfo;",
            "  ",
            "  $1FailureAction({this.errorInfo});",
            "}",
        ]
    },

    "create presentation by StatefullWidget": {
        "prefix": "fullpres",
        "body": [
            "import 'package:flutter/material.dart';",
            "import 'package:redux/redux.dart';",
            "",
            "class $1Presentation extends StatefulWidget {",
            "  final $1ViewModel vm;",
            "",
            "  const $1Presentation({Key key, this.vm}) : super(key: key);",
            "",
            "  @override",
            "  _$1PresentationState createState() => _$1PresentationState();",
            "",
            "}",
            "",
            "class _$1PresentationState extends State<$1Presentation> {",
            "  @override",
            "  void initState() {",
            "    super.initState();",
            "  }",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    // TODO build widget",
            "    return Container();",
            "  }",
            "}",
            "",
            "class $1ViewModel {",
            "  // TODO implement hashCode and == functions;",
            "  static $1ViewModel fromStore(Store<AppState> store) {",
            "    // TODO implement fromStore",
            "    return $1ViewModel();",
            "  }",
            "}",

        ],
    },

    "flutter redux middleware factory": {
        "prefix": "midd",
        "body": [
            "import 'package:redux/redux.dart';",
            "",
            "// TODO add this to initialMiddleware",
            "class $1MiddlewareFactory extends MiddlewareFactory {",
            "  $1MiddlewareFactory(AppRepository repository) : super(repository);",
            "",
            "  @override",
            "  List<Middleware<AppState>> generate() {",
            "    return [",
            "      // TypedMiddleware<AppState, Fetch$2Action>(_fetch$2),",
            "      // TODO add TypedMiddleware",
            "    ];",
            "  }",
            "}",
        ],
    },
    "create presentation with vm by StatelessWidget": {
        "prefix": "pres",
        "body": [
            "import 'package:flutter/material.dart';",
            "import 'package:redux/redux.dart';",
            "",
            "class $1Presentation extends StatelessWidget {",
            "  final $1ViewModel vm;",
            "",
            "  const $1Presentation({Key key, this.vm}) : super(key: key);",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    // TODO build widget",
            "    return Container();",
            "  }",
            "}",
            "",
            "class $1ViewModel {",
            "",
            "  // TODO implement hashCode and == functions;",
            "",
            "  static $1ViewModel fromStore(Store<AppState> store) {",
            "    // TODO implement fromStore",
            "    return $1ViewModel();",
            "  }",
            "}",
        ],
    },
    "flutter redux state and reducer": {
        "prefix": "redu",
        "body": [
            "import 'package:meta/meta.dart';",
            "import 'package:redux/redux.dart';",
            "",
            "// TODO add this state to AppState",
            "@immutable",
            "class $1State {",
            "",
            "  final bool isLoading;",
            "",
            "  $1State({this.isLoading,",
            "  });",
            "",
            "  $1State copyWith(",
            "    {bool isLoading,",
            "    }) {",
            "  // TODO implement copyWith",
            "  return $1State(",
            "    isLoading: isLoading ?? this.isLoading,",
            "  );",
            "  }",
            "",
            "  // TODO implement initialState",
            "  $1State.initialState()",
            "    : isLoading = false;",
            "}",
            "",
            "// TODO add this reducer to reduxReducer",
            "final $2Reducer = combineReducers<$1State>([",
            "  // TODO add typedReducer",
            "  //  TypedReducer<$1State, Action>(_onRequest),",
            "]);",
        ],
    },

    "create flutter reudx screen with  presentation and vm by StatelessWidget": {
        "prefix": "scre",
        "body": [
            "import 'package:flutter/material.dart';",
            "import 'package:flutter_redux/flutter_redux.dart';",
            "import 'package:redux/redux.dart';",
            "",
            "class $1Presentation extends StatelessWidget {",
            "  final $1ViewModel vm;",
            "",
            "  const $1Presentation({Key key, this.vm}) : super(key: key);",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return Container();",
            "  }",
            "}",
            "",
            "class $1Screen extends StatelessWidget {",
            "  static const String routeName = '$2';",
            "",
            "  @override",
            "  Widget build(BuildContext context) {",
            "    return StoreConnector<AppState, $1ViewModel>(",
            "      distinct: true,",
            "      onInit: (store) {",
            "        store.dispatch(Fetch$1Action(isRefresh: true));",
            "      },",
            "      onDispose: (store) => store.dispatch($1ResetAction()),",
            "      converter: $1ViewModel.fromStore,",
            "      builder: (context, vm) {",
            "        return $1Presentation(vm: vm);",
            "      },",
            "    );",
            "  }",
            "",
            "  static enter<T>({BuildContext context, Function(T) onResult}) {",
            "  return Navigator.push(",
            "          context,",
            "          MaterialPageRoute(",
            "              settings: RouteSettings(",
            "                  name: PageProperty(",
            "                routeName: routeName,",
            "                category: PageCategory.$3, // TODO add page properties",
            "               ).toJsonString()),",
            "               builder: (BuildContext context) => $1Screen()))",
            "        .then(onResult ?? (_) {});",
            "  }",
            "}",
            "",
            "class $1ViewModel {",
            "",
            "  // TODO implement hashCode and == functions;",
            "",
            "  static $1ViewModel fromStore(Store<AppState> store) {",
            "    // TODO implement fromStore",
            "    return $1ViewModel();",
            "  }",
            "}",
        ],
    },
    "create viewModel for flutter redux": {
        "prefix": "vm",
        "body": [
            "class $1ViewModel {",
            "",
            "  // TODO implement hashCode and == functions;",
            "  ",
            "  static $1ViewModel fromStore(Store<AppState> store) {",
            "    // TODO implement fromStore",
            "    return $1ViewModel();",
            "  }",
            "}",
        ],
    }
}